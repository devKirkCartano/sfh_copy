<!-- index-admin.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <!-- Include the HTML5 QR code scanner library -->
  <script src="/html5-qrcode/html5-qrcode.min.js"></script>
  <!-- Include jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

  <style>
    main {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }

    #reader {
      width: 600px;
      margin-bottom: 20px;
    }

    #result {
      text-align: center;
      font-size: 1.15;
    }

    #scannedNamesTable {
      width: 80%;
      margin-top: 20px;
    }

    #scannedNamesTable th,
    #scannedNamesTable td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    nav {
        background-color: #333;
        overflow: hidden;
    }

    nav a {
        float: left;
        display: block;
        color: white;
        text-align: center;
        padding: 14px 16px;
        text-decoration: none;
    }

    nav a:hover {
        background-color: #ddd;
        color: black;
    }
  </style>
</head>

<body>
    <nav>
        <a href="/">Home page</a>
        <a href="/admin/scanner-page">QR Scanner</a>
        <a href="/admin/application-form">Application Form</a>
        <a href="/admin/announcement-form">Announcement Form</a>
        <a href="/admin/accounting">Accounting</a>
        
        <!-- Add more links as needed -->
    </nav>
  <main>
    <!-- Display the scanned QR code data -->
    <div id="result"></div>

    <!-- Container for the QR code scanner -->
    <div id="reader"></div>

    <!-- Scanned names table -->
    <table id="scannedNamesTable">
      <thead>
        <tr>
          <th>Members</th>
          <th>Date & Time</th>
        </tr>
      </thead>
      <tbody id="scannedNamesBody">
        <!-- Scanned names will be dynamically added here -->
      </tbody>
    </table>
  </main>

  <script>
        document.addEventListener('DOMContentLoaded', () => {
          $.get('/getScannedNames', function (data, status) {
            // Check if data is an array and not empty
            if (Array.isArray(data) && data.length > 0) {
              for (let entry of data) {
                // Check if the entry has a timestamp property
                const timestamp = entry.timestamp ? new Date(entry.timestamp).toLocaleString() : 'N/A';
                const newRow = $('<tr><td>' + entry.firstName + " " + entry.lastName + '</td><td>' + timestamp + '</td></tr>');
                $('#scannedNamesBody').append(newRow);
              }
            } else {
              // Handle the case when no data is received
              console.log('No scanned names data received');
            }
          });
        });
    function onScanSuccess(decodedText, decodedResult) {
       // Extract the "Name" and "Timestamp" from the scanned data
      const scannedData = JSON.parse(decodedText);
      const firstName = scannedData.firstName;
      const lastName = scannedData.lastName;

  // Call a function to authenticate against the 'users' table
  authenticateUser(firstName, lastName)
    .then(authenticated => {
      if (authenticated) {
        // If authentication is successful, record the name
        fetch('/record-member-name', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ firstName, lastName }),
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              console.log('Scanned name recorded successfully');
              
              // Check if the server response contains a timestamp
              if (data.timestamp) {
                // Update the table with the newly scanned name and timestamp
                updateScannedNamesTable(firstName, lastName, data.timestamp);
                alert(`Member ${firstName} is a subscribed user.`);
              } else {
                console.error('Invalid timestamp in server response');
              }
            } else {
              console.error('Failed to record scanned name');
            }
          })
          .catch(error => {
            console.error('Error recording scanned name:', error.message);
          });
      } else {
        alert(`Authentication failed. ${firstName} is not a subscribed user.`);
        console.log('Authentication failed. Name not recorded.');
      }
    })
    .catch(error => {
      console.error('Error during authentication:', error.message);
    });
}


    function updateScannedNamesTable(firstName, lastName, timestamp) {
      // Format the timestamp using JavaScript Date object (adjust format as needed)
      const formattedTimestamp = new Date(timestamp).toLocaleString();

      // Create a new row with the scanned name and timestamp
      const newRow = $('<tr><td>' + firstName + " "  + lastName + '</td><td>' + formattedTimestamp + '</td></tr>');
      
      // Append the new row to the table body
      $('#scannedNamesBody').prepend(newRow);
    }


    let errorLoggedRecently = false;

    function onScanFailure(error) {
      if (!errorLoggedRecently) {
        console.warn(`Code scan error = ${error}`);
        errorLoggedRecently = true;

        // Reset the flag after a delay (e.g., 5 seconds)
        setTimeout(() => {
          errorLoggedRecently = false;
        }, 5000); // Adjust the delay as needed
      }
    }

    let html5QrcodeScanner = new Html5QrcodeScanner(
      "reader",
      { fps: 20, qrbox: { width: 250, height: 250 } },
      false
    );

    html5QrcodeScanner.render(onScanSuccess, onScanFailure);

    async function authenticateUser(firstName, lastName) {
  // Make sure name is defined before making the request
  if (!firstName || !lastName) {
    console.error('Error: Name is undefined');
    return false;
  }

  try {
    // Make an AJAX request to your server to authenticate against the 'users' table
    const response = await fetch('/authenticate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ firstName, lastName }),
    });

    const data = await response.json();

    console.log('Data output', data);

    if (data.success) {
      console.log('Authentication successful');
      // Perform actions after successful authentication
      return true;
    } else {
      console.log('Authentication failed');
      // Handle authentication failure
      return false;
    }
  } catch (error) {
    console.error('Error during authentication:', error.message);
    return false;
  }
}
  </script>
    <form action="/logout" method="post">
        <button type="submit">Logout</button>
    </form>
</body>

</html>